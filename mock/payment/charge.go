// Code generated by MockGen. DO NOT EDIT.
// Source: ./payment/contract/vendor_charge.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	domain "diLesson/application/domain"
	dto "diLesson/payment/contract/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVendorCharge is a mock of VendorCharge interface.
type MockVendorCharge struct {
	ctrl     *gomock.Controller
	recorder *MockVendorChargeMockRecorder
}

// MockVendorChargeMockRecorder is the mock recorder for MockVendorCharge.
type MockVendorChargeMockRecorder struct {
	mock *MockVendorCharge
}

// NewMockVendorCharge creates a new mock instance.
func NewMockVendorCharge(ctrl *gomock.Controller) *MockVendorCharge {
	mock := &MockVendorCharge{ctrl: ctrl}
	mock.recorder = &MockVendorChargeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorCharge) EXPECT() *MockVendorChargeMockRecorder {
	return m.recorder
}

// Charge mocks base method.
func (m *MockVendorCharge) Charge(pay *domain.Pay) (*dto.VendorChargeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Charge", pay)
	ret0, _ := ret[0].(*dto.VendorChargeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charge indicates an expected call of Charge.
func (mr *MockVendorChargeMockRecorder) Charge(pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charge", reflect.TypeOf((*MockVendorCharge)(nil).Charge), pay)
}
