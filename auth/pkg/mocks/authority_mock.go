// Code generated by MockGen. DO NOT EDIT.
// Source: authority.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthority is a mock of Authority interface.
type MockAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorityMockRecorder
}

// MockAuthorityMockRecorder is the mock recorder for MockAuthority.
type MockAuthorityMockRecorder struct {
	mock *MockAuthority
}

// NewMockAuthority creates a new mock instance.
func NewMockAuthority(ctrl *gomock.Controller) *MockAuthority {
	mock := &MockAuthority{ctrl: ctrl}
	mock.recorder = &MockAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthority) EXPECT() *MockAuthorityMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockAuthority) Issue(subject, role string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", subject, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issue indicates an expected call of Issue.
func (mr *MockAuthorityMockRecorder) Issue(subject, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockAuthority)(nil).Issue), subject, role)
}

// Refresh mocks base method.
func (m *MockAuthority) Refresh(oldRefresh string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", oldRefresh)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthorityMockRecorder) Refresh(oldRefresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthority)(nil).Refresh), oldRefresh)
}

// Revoke mocks base method.
func (m *MockAuthority) Revoke(access string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", access)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAuthorityMockRecorder) Revoke(access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAuthority)(nil).Revoke), access)
}

// Verify mocks base method.
func (m *MockAuthority) Verify(access string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", access)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthorityMockRecorder) Verify(access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthority)(nil).Verify), access)
}
