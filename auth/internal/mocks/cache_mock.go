// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "auth/internal/model/principal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCache) Del(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacheMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCache)(nil).Del), key)
}

// EntryCount mocks base method.
func (m *MockCache) EntryCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntryCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// EntryCount indicates an expected call of EntryCount.
func (mr *MockCacheMockRecorder) EntryCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntryCount", reflect.TypeOf((*MockCache)(nil).EntryCount))
}

// Get mocks base method.
func (m *MockCache) Get(email string) (model.Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", email)
	ret0, _ := ret[0].(model.Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), email)
}

// HitCount mocks base method.
func (m *MockCache) HitCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HitCount indicates an expected call of HitCount.
func (mr *MockCacheMockRecorder) HitCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitCount", reflect.TypeOf((*MockCache)(nil).HitCount))
}

// MissCount mocks base method.
func (m *MockCache) MissCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MissCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MissCount indicates an expected call of MissCount.
func (mr *MockCacheMockRecorder) MissCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissCount", reflect.TypeOf((*MockCache)(nil).MissCount))
}

// Set mocks base method.
func (m *MockCache) Set(key string, p model.Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, p)
}
